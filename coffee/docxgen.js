// Generated by CoffeeScript 1.6.3
/*
Docxgen.coffee
Created by Edgar HIPP
26/07/2013
*/

var DocxGen, env, root,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

root = typeof global !== "undefined" && global !== null ? global : window;

env = typeof global !== "undefined" && global !== null ? 'node' : 'browser';

root.DocxGen = DocxGen = (function() {
  var imageExtensions;

  imageExtensions = ['gif', 'jpeg', 'jpg', 'emf', 'png'];

  function DocxGen(content, templateVars, intelligentTagging, qrCode, localImageCreator, finishedCallback) {
    this.templateVars = templateVars != null ? templateVars : {};
    this.intelligentTagging = intelligentTagging != null ? intelligentTagging : true;
    this.qrCode = qrCode != null ? qrCode : false;
    this.localImageCreator = localImageCreator;
    this.finishedCallback = finishedCallback;
    if (this.finishedCallback == null) {
      this.finishedCallback = (function() {
        return console.log('document ready!');
      });
    }
    if (this.localImageCreator == null) {
      this.localImageCreator = function(arg, callback) {
        var result;
        result = JSZipBase64.decode("iVBORw0KGgoAAAANSUhEUgAAABcAAAAXCAIAAABvSEP3AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACXSURBVDhPtY7BDYAwDAMZhCf7b8YMxeCoatOQJhWc/KGxT2zlCyaWcz8Y+X7Bs1TFVJSwIHIYyFkQufWIRVX9cNJyW1QpEo4rixaEe7JuQagAUctb7ZFYFh5MVJPBe84CVBnB42//YsZRgKjFDBVg3cI9WbRwXLktQJX8cNIiFhM1ZuTWk7PIYSBhkVcLzwIiCjCxhCjlAkBqYnqFoQQ2AAAAAElFTkSuQmCC");
        return callback(result);
      };
    }
    this.templatedFiles = ["word/document.xml", "word/footer1.xml", "word/footer2.xml", "word/footer3.xml", "word/header1.xml", "word/header2.xml", "word/header3.xml"];
    this.filesProcessed = 0;
    this.qrCodeNumCallBack = 0;
    this.qrCodeWaitingFor = [];
    if (content != null) {
      this.load(content);
    }
    this;
  }

  DocxGen.prototype.qrCodeCallBack = function(num, add) {
    var index;
    if (add == null) {
      add = true;
    }
    if (add === true) {
      this.qrCodeWaitingFor.push(num);
    } else if (add === false) {
      index = this.qrCodeWaitingFor.indexOf(num);
      this.qrCodeWaitingFor.splice(index, 1);
    }
    return this.testReady();
  };

  DocxGen.prototype.testReady = function() {
    if (this.qrCodeWaitingFor.length === 0 && this.filesProcessed === this.templatedFiles.length) {
      this.ready = true;
      return this.finishedCallback();
    }
  };

  DocxGen.prototype.load = function(content) {
    this.zip = new JSZip(content);
    return this.loadImageRels();
  };

  DocxGen.prototype.loadImageRels = function() {
    var RidArray, content, tag;
    content = DocUtils.decode_utf8(this.zip.files["word/_rels/document.xml.rels"].data);
    this.xmlDoc = DocUtils.Str2xml(content);
    RidArray = (function() {
      var _i, _len, _ref, _results;
      _ref = this.xmlDoc.getElementsByTagName('Relationship');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        _results.push(parseInt(tag.getAttribute("Id").substr(3)));
      }
      return _results;
    }).call(this);
    this.maxRid = RidArray.max();
    this.imageRels = [];
    return this;
  };

  DocxGen.prototype.addExtensionRels = function(contentType, extension) {
    var addTag, content, defaultTags, newTag, tag, types, xmlDoc, _i, _len;
    content = DocUtils.decode_utf8(this.zip.files["[Content_Types].xml"].data);
    xmlDoc = DocUtils.Str2xml(content);
    addTag = true;
    defaultTags = xmlDoc.getElementsByTagName('Default');
    for (_i = 0, _len = defaultTags.length; _i < _len; _i++) {
      tag = defaultTags[_i];
      if (tag.getAttribute('Extension') === extension) {
        addTag = false;
      }
    }
    if (addTag) {
      types = xmlDoc.getElementsByTagName("Types")[0];
      newTag = xmlDoc.createElement('Default');
      newTag.namespaceURI = null;
      newTag.setAttribute('ContentType', contentType);
      newTag.setAttribute('Extension', extension);
      types.appendChild(newTag);
      return this.zip.files["[Content_Types].xml"].data = DocUtils.encode_utf8(DocUtils.xml2Str(xmlDoc));
    }
  };

  DocxGen.prototype.addImageRels = function(imageName, imageData) {
    var extension, file, newTag, relationships;
    if (this.zip.files["word/media/" + imageName] != null) {
      throw 'file already exists';
      return false;
    }
    this.maxRid++;
    file = {
      'name': "word/media/" + imageName,
      'data': imageData,
      'options': {
        base64: false,
        binary: true,
        compression: null,
        date: new Date(),
        dir: false
      }
    };
    this.zip.file(file.name, file.data, file.options);
    extension = imageName.replace(/[^.]+\.([^.]+)/, '$1');
    this.addExtensionRels("image/" + extension, extension);
    relationships = this.xmlDoc.getElementsByTagName("Relationships")[0];
    newTag = this.xmlDoc.createElement('Relationship');
    newTag.namespaceURI = null;
    newTag.setAttribute('Id', "rId" + this.maxRid);
    newTag.setAttribute('Type', 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image');
    newTag.setAttribute('Target', "media/" + imageName);
    relationships.appendChild(newTag);
    this.zip.files["word/_rels/document.xml.rels"].data = DocUtils.encode_utf8(DocUtils.xml2Str(this.xmlDoc));
    return this.maxRid;
  };

  DocxGen.prototype.getImageByRid = function(rId) {
    var cRId, path, relationship, relationships, _i, _len;
    relationships = this.xmlDoc.getElementsByTagName('Relationship');
    for (_i = 0, _len = relationships.length; _i < _len; _i++) {
      relationship = relationships[_i];
      cRId = relationship.getAttribute('Id');
      if (rId === cRId) {
        path = relationship.getAttribute('Target');
        if (path.substr(0, 6) === 'media/') {
          return this.zip.files["word/" + path];
        }
      }
    }
    return null;
  };

  DocxGen.prototype.getImageList = function() {
    var extension, imageList, index, regex;
    regex = /[^.]+\.([^.]+)/;
    imageList = [];
    for (index in this.zip.files) {
      extension = index.replace(regex, '$1');
      if (__indexOf.call(imageExtensions, extension) >= 0) {
        imageList.push({
          "path": index,
          files: this.zip.files[index]
        });
      }
    }
    return imageList;
  };

  DocxGen.prototype.setImage = function(path, data) {
    return this.zip.files[path].data = data;
  };

  DocxGen.prototype.applyTemplateVars = function(templateVars, qrCodeCallback) {
    var currentFile, fileName, _i, _j, _len, _len1, _ref, _ref1;
    this.templateVars = templateVars != null ? templateVars : this.templateVars;
    if (qrCodeCallback == null) {
      qrCodeCallback = null;
    }
    _ref = this.templatedFiles;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fileName = _ref[_i];
      if (this.zip.files[fileName] == null) {
        this.filesProcessed++;
      }
    }
    _ref1 = this.templatedFiles;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      fileName = _ref1[_j];
      if (!(this.zip.files[fileName] != null)) {
        continue;
      }
      currentFile = new DocXTemplater(this.zip.files[fileName].data, this, this.templateVars, this.intelligentTagging, [], {}, 0, qrCodeCallback, this.localImageCreator);
      this.zip.files[fileName].data = currentFile.applyTemplateVars().content;
      this.filesProcessed++;
    }
    return this.testReady();
  };

  DocxGen.prototype.getCsvVars = function() {
    var csvVars, csvcontent, i, j, obj, temp, _i, _len;
    obj = this.getTemplateVars();
    csvcontent = "";
    csvVars = {};
    for (i = _i = 0, _len = obj.length; _i < _len; i = ++_i) {
      temp = obj[i];
      for (j in temp.vars) {
        if (csvVars[j] == null) {
          csvcontent += j + ";";
        }
        csvVars[j] = {};
      }
    }
    return csvcontent;
  };

  DocxGen.prototype.getCsvFile = function() {
    var file;
    file = btoa(this.getCsvVars());
    return document.location.href = "data:application/vnd.ms-excel;base64," + file;
  };

  DocxGen.prototype.getTemplateVars = function() {
    var currentFile, fileName, h, n, usedTemplateV, usedTemplateVars, _i, _len, _ref;
    usedTemplateVars = [];
    _ref = this.templatedFiles;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fileName = _ref[_i];
      if (!(this.zip.files[fileName] != null)) {
        continue;
      }
      currentFile = new DocXTemplater(this.zip.files[fileName].data, this, this.templateVars, this.intelligentTagging);
      usedTemplateV = currentFile.applyTemplateVars().usedTemplateVars;
      n = 0;
      for (h in usedTemplateV) {
        n++;
      }
      if (n > 0) {
        usedTemplateVars.push({
          fileName: fileName,
          vars: usedTemplateV
        });
      }
    }
    return usedTemplateVars;
  };

  DocxGen.prototype.setTemplateVars = function(templateVars) {
    this.templateVars = templateVars;
    return this;
  };

  DocxGen.prototype.output = function(download, name) {
    var result;
    if (download == null) {
      download = true;
    }
    if (name == null) {
      name = "output.docx";
    }
    this.calcZip();
    result = this.zip.generate();
    if (download) {
      if (env === 'node') {
        fs.writeFile(process.cwd() + '/' + name, result, 'base64', function(err) {
          if (err) {
            throw err;
          }
          return console.log('file Saved');
        });
      } else {
        document.location.href = "data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64," + result;
      }
    }
    return result;
  };

  DocxGen.prototype.calcZip = function() {
    var file, index, zip;
    zip = new JSZip();
    for (index in this.zip.files) {
      file = this.zip.files[index];
      zip.file(file.name, file.data, file.options);
    }
    return this.zip = zip;
  };

  DocxGen.prototype.getFullText = function(path, data) {
    var currentFile;
    if (path == null) {
      path = "word/document.xml";
    }
    if (data == null) {
      data = "";
    }
    if (data === "") {
      currentFile = new DocXTemplater(this.zip.files[path].data, this, this.templateVars, this.intelligentTagging);
    } else {
      currentFile = new DocXTemplater(data, this, this.templateVars, this.intelligentTagging);
    }
    return currentFile.getFullText();
  };

  DocxGen.prototype.download = function(swfpath, imgpath, filename) {
    var output;
    if (filename == null) {
      filename = "default.docx";
    }
    this.calcZip();
    output = this.zip.generate();
    return Downloadify.create('downloadify', {
      filename: function() {
        return filename;
      },
      data: function() {
        return output;
      },
      onCancel: function() {
        return alert('You have cancelled the saving of this file.');
      },
      onError: function() {
        return alert('You must put something in the File Contents or there will be nothing to save!');
      },
      swf: swfpath,
      downloadImage: imgpath,
      width: 100,
      height: 30,
      transparent: true,
      append: false,
      dataType: 'base64'
    });
  };

  return DocxGen;

})();

/*
//@ sourceMappingURL=docxgen.map
*/
